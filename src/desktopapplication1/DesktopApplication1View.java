/*
 * DesktopApplication1View.java
 */

package desktopapplication1;

import java.awt.Dimension;
import javax.swing.AbstractListModel;
import javax.swing.ActionMap;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JTabbedPane;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.SwingConstants;
import org.jdesktop.application.Action;
import org.jdesktop.application.Application;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.DefaultListModel;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.ListModel;

/**
 * The application's main frame.
 */
public class DesktopApplication1View extends FrameView {

    public DesktopApplication1View(SingleFrameApplication app) {
        super(app);

        initComponents();

        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    progressBar.setVisible(false);
                    progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String)(evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer)(evt.getNewValue());
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(false);
                    progressBar.setValue(value);
                }
            }
        });
        
        updateContacts();
        
        POP3Connection p = new POP3Connection("pop.gmail.com",995,"turgutbasar@gmail.com","123asd123");
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = DesktopApplication1.getApplication().getMainFrame();
            aboutBox = new DesktopApplication1AboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        DesktopApplication1.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new JPanel();
        main_TabbedPane = new JTabbedPane();
        main_receivedBoxPanel = new JPanel();
        jScrollPane1 = new JScrollPane();
        main_receivedList = new JList();
        main_sentBoxPanel = new JPanel();
        jScrollPane2 = new JScrollPane();
        main_sentList = new JList();
        main_contactsPanel = new JPanel();
        jScrollPane3 = new JScrollPane();
        main_contactsList = new JList();
        main_topPanel = new JPanel();
        main_mailLabel = new JLabel();
        main_newMailButton = new JButton();
        menuBar = new JMenuBar();
        JMenu fileMenu = new JMenu();
        settingsMenuItem = new JMenuItem();
        JMenuItem exitMenuItem = new JMenuItem();
        editMenu = new JMenu();
        JMenu helpMenu = new JMenu();
        JMenuItem aboutMenuItem = new JMenuItem();
        statusPanel = new JPanel();
        JSeparator statusPanelSeparator = new JSeparator();
        statusMessageLabel = new JLabel();
        statusAnimationLabel = new JLabel();
        progressBar = new JProgressBar();

        mainPanel.setName("mainPanel"); // NOI18N

        main_TabbedPane.setName("main_TabbedPane"); // NOI18N

        main_receivedBoxPanel.setName("main_receivedBoxPanel"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        main_receivedList.setName("main_receivedList"); // NOI18N
        jScrollPane1.setViewportView(main_receivedList);

        GroupLayout main_receivedBoxPanelLayout = new GroupLayout(main_receivedBoxPanel);
        main_receivedBoxPanel.setLayout(main_receivedBoxPanelLayout);
        main_receivedBoxPanelLayout.setHorizontalGroup(
            main_receivedBoxPanelLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(main_receivedBoxPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 781, Short.MAX_VALUE)
                .addContainerGap())
        );
        main_receivedBoxPanelLayout.setVerticalGroup(
            main_receivedBoxPanelLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(main_receivedBoxPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE)
                .addContainerGap())
        );

        ResourceMap resourceMap = Application.getInstance(DesktopApplication1.class).getContext().getResourceMap(DesktopApplication1View.class);
        main_TabbedPane.addTab(resourceMap.getString("main_receivedBoxPanel.TabConstraints.tabTitle"), main_receivedBoxPanel); // NOI18N

        main_sentBoxPanel.setName("main_sentBoxPanel"); // NOI18N

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        main_sentList.setName("main_sentList"); // NOI18N
        jScrollPane2.setViewportView(main_sentList);

        GroupLayout main_sentBoxPanelLayout = new GroupLayout(main_sentBoxPanel);
        main_sentBoxPanel.setLayout(main_sentBoxPanelLayout);
        main_sentBoxPanelLayout.setHorizontalGroup(
            main_sentBoxPanelLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(main_sentBoxPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, GroupLayout.DEFAULT_SIZE, 781, Short.MAX_VALUE)
                .addContainerGap())
        );
        main_sentBoxPanelLayout.setVerticalGroup(
            main_sentBoxPanelLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(main_sentBoxPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE)
                .addContainerGap())
        );

        main_TabbedPane.addTab(resourceMap.getString("main_sentBoxPanel.TabConstraints.tabTitle"), main_sentBoxPanel); // NOI18N

        main_contactsPanel.setMinimumSize(new Dimension(480, 480));
        main_contactsPanel.setName("main_contactsPanel"); // NOI18N
        main_contactsPanel.setPreferredSize(new Dimension(640, 480));

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        main_contactsList.setName("main_contactsList"); // NOI18N
        jScrollPane3.setViewportView(main_contactsList);

        GroupLayout main_contactsPanelLayout = new GroupLayout(main_contactsPanel);
        main_contactsPanel.setLayout(main_contactsPanelLayout);
        main_contactsPanelLayout.setHorizontalGroup(
            main_contactsPanelLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(main_contactsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, GroupLayout.DEFAULT_SIZE, 781, Short.MAX_VALUE)
                .addContainerGap())
        );
        main_contactsPanelLayout.setVerticalGroup(
            main_contactsPanelLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(main_contactsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE)
                .addContainerGap())
        );

        main_TabbedPane.addTab(resourceMap.getString("main_contactsPanel.TabConstraints.tabTitle"), main_contactsPanel); // NOI18N

        main_topPanel.setBackground(resourceMap.getColor("main_topPanel.background")); // NOI18N
        main_topPanel.setName("main_topPanel"); // NOI18N

        main_mailLabel.setText(resourceMap.getString("main_mailLabel.text")); // NOI18N
        main_mailLabel.setName("main_mailLabel"); // NOI18N

        ActionMap actionMap = Application.getInstance(DesktopApplication1.class).getContext().getActionMap(DesktopApplication1View.class, this);
        main_newMailButton.setAction(actionMap.get("showNewMailDialog")); // NOI18N
        main_newMailButton.setText(resourceMap.getString("main_newMailButton.text")); // NOI18N
        main_newMailButton.setName("main_newMailButton"); // NOI18N

        GroupLayout main_topPanelLayout = new GroupLayout(main_topPanel);
        main_topPanel.setLayout(main_topPanelLayout);
        main_topPanelLayout.setHorizontalGroup(
            main_topPanelLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(Alignment.TRAILING, main_topPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(main_mailLabel, GroupLayout.PREFERRED_SIZE, 186, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(ComponentPlacement.RELATED, 545, Short.MAX_VALUE)
                .addComponent(main_newMailButton)
                .addContainerGap())
        );
        main_topPanelLayout.setVerticalGroup(
            main_topPanelLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(main_topPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(main_topPanelLayout.createParallelGroup(Alignment.LEADING)
                    .addComponent(main_newMailButton, Alignment.TRAILING)
                    .addComponent(main_mailLabel, GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE))
                .addContainerGap())
        );

        main_mailLabel.getAccessibleContext().setAccessibleDescription(resourceMap.getString("main_mailLabel.AccessibleContext.accessibleDescription")); // NOI18N

        GroupLayout mainPanelLayout = new GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(Alignment.LEADING)
            .addComponent(main_topPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(main_TabbedPane, GroupLayout.DEFAULT_SIZE, 806, Short.MAX_VALUE)
                .addGap(10, 10, 10))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addComponent(main_topPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(main_TabbedPane, GroupLayout.DEFAULT_SIZE, 510, Short.MAX_VALUE)
                .addContainerGap())
        );

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        settingsMenuItem.setAction(actionMap.get("showSettings")); // NOI18N
        settingsMenuItem.setText(resourceMap.getString("settingsMenuItem.text")); // NOI18N
        settingsMenuItem.setName("settingsMenuItem"); // NOI18N
        fileMenu.add(settingsMenuItem);

        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setText(resourceMap.getString("editMenu.text")); // NOI18N
        editMenu.setName("editMenu"); // NOI18N
        menuBar.add(editMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        statusPanel.setName("statusPanel"); // NOI18N

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        GroupLayout statusPanelLayout = new GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(Alignment.LEADING)
            .addComponent(statusPanelSeparator, GroupLayout.DEFAULT_SIZE, 826, Short.MAX_VALUE)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusMessageLabel)
                .addPreferredGap(ComponentPlacement.RELATED, 656, Short.MAX_VALUE)
                .addComponent(progressBar, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(statusAnimationLabel)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(statusPanelSeparator, GroupLayout.PREFERRED_SIZE, 2, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(statusPanelLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(statusMessageLabel)
                    .addComponent(statusAnimationLabel)
                    .addComponent(progressBar, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3))
        );

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }// </editor-fold>//GEN-END:initComponents

    @Action
    public void showSettings() {
        if (settingsPanel == null) {
            JFrame mainFrame = DesktopApplication1.getApplication().getMainFrame();
            settingsPanel = new SettingsDialog(mainFrame);
            settingsPanel.setLocationRelativeTo(mainFrame);
        }
        DesktopApplication1.getApplication().show(settingsPanel);
    }

    @Action
    public void showNewMailDialog() {
        if (newMailPanel == null) {
            JFrame mainFrame = DesktopApplication1.getApplication().getMainFrame();
            newMailPanel = new NewMailDialog(mainFrame);
            newMailPanel.setLocationRelativeTo(mainFrame);
        }
        DesktopApplication1.getApplication().show(newMailPanel);        
    }
    
    public void updateContacts () {
        main_contactsList.setModel(new AbstractListModel() {
            String[] strings = DesktopApplication1.contacts.getAllContacts();
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JMenu editMenu;
    private JScrollPane jScrollPane1;
    private JScrollPane jScrollPane2;
    private JScrollPane jScrollPane3;
    private JPanel mainPanel;
    private JTabbedPane main_TabbedPane;
    private JList main_contactsList;
    private JPanel main_contactsPanel;
    private JLabel main_mailLabel;
    private JButton main_newMailButton;
    private JPanel main_receivedBoxPanel;
    private JList main_receivedList;
    private JPanel main_sentBoxPanel;
    private JList main_sentList;
    private JPanel main_topPanel;
    private JMenuBar menuBar;
    private JProgressBar progressBar;
    private JMenuItem settingsMenuItem;
    private JLabel statusAnimationLabel;
    private JLabel statusMessageLabel;
    private JPanel statusPanel;
    // End of variables declaration//GEN-END:variables

    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;

    private JDialog aboutBox;
    private JDialog settingsPanel;
    private JDialog newMailPanel;
    private DefaultListModel contactsListModel;

}
